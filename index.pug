- const rad = (degree) => (degree * Math.PI) / 180;
- const points = (vertices, size, outerSize) => {
-   const path = [];
-   for (let i = 0; i <= vertices; i++) {
-     const part = rad((360 / vertices) * (i + 0.25 * (vertices - 2)));
-     const x = Math.cos(part) * size / 2 + outerSize / 2;
-     const y = Math.sin(part) * size / 2 + outerSize / 2;
-     path.push(`${i === 0 ? 'M' : 'L'}${x},${y}`);
-   }
- return path.join(' ')
- }

mixin polygon(vertices, size, outerSize)
  path(d=points(vertices, size, outerSize))&attributes(attributes)

mixin balls(vertices, size, outerSize)
  - const i = (16 - vertices + 2)
  circle.ball(
    r=0.04,
    fill="black",
    style=`
      offset-path: path('${points(vertices, size, outerSize)}');
      animation: followpath calc(var(--speed, 32s) / ${i}) linear infinite;
    `
  )

- const items = 12;
- const space = 0.25;
- const outer = items * space + 1;
- let depth = items + 1;
svg(viewBox=`-0.5 -0.5 ${outer + 1} ${outer + 1}` xmlns="http://www.w3.org/2000/svg")
  style
   | @keyframes followpath {
   |   to {
   |     offset-distance: 100%;
   |   }
   | }
  while depth--
    +polygon(depth + 3,depth * space + 1, outer)(
      stroke-width="0.01",
      stroke=`hsl(${(360 / 13) * depth}, 100%, 50%)`,
      fill="none",
    ) 
  - depth = items + 1;
  while depth--
    +balls(depth + 3,depth * space + 1, outer)(
      stroke=`hsl(${(360 / 13) * depth}, 100%, 50%)`,
    )
